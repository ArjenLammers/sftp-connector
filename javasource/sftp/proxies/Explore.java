// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package sftp.proxies;

public class Explore
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject exploreMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "SFTP.Explore";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Path("Path"),
		Explore_Configuration("SFTP.Explore_Configuration"),
		Explore_ExplorerFile("SFTP.Explore_ExplorerFile"),
		MkDirRequest_Explore("SFTP.MkDirRequest_Explore"),
		RenameRequest_Explore("SFTP.RenameRequest_Explore");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Explore(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "SFTP.Explore"));
	}

	protected Explore(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject exploreMendixObject)
	{
		if (exploreMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("SFTP.Explore", exploreMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a SFTP.Explore");

		this.exploreMendixObject = exploreMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Explore.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static sftp.proxies.Explore initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return sftp.proxies.Explore.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static sftp.proxies.Explore initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new sftp.proxies.Explore(context, mendixObject);
	}

	public static sftp.proxies.Explore load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return sftp.proxies.Explore.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Path
	 */
	public final java.lang.String getPath()
	{
		return getPath(getContext());
	}

	/**
	 * @param context
	 * @return value of Path
	 */
	public final java.lang.String getPath(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Path.toString());
	}

	/**
	 * Set value of Path
	 * @param path
	 */
	public final void setPath(java.lang.String path)
	{
		setPath(getContext(), path);
	}

	/**
	 * Set value of Path
	 * @param context
	 * @param path
	 */
	public final void setPath(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String path)
	{
		getMendixObject().setValue(context, MemberNames.Path.toString(), path);
	}

	/**
	 * @return value of Explore_Configuration
	 */
	public final sftp.proxies.Configuration getExplore_Configuration() throws com.mendix.core.CoreException
	{
		return getExplore_Configuration(getContext());
	}

	/**
	 * @param context
	 * @return value of Explore_Configuration
	 */
	public final sftp.proxies.Configuration getExplore_Configuration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.Configuration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Explore_Configuration.toString());
		if (identifier != null)
			result = sftp.proxies.Configuration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Explore_Configuration
	 * @param explore_configuration
	 */
	public final void setExplore_Configuration(sftp.proxies.Configuration explore_configuration)
	{
		setExplore_Configuration(getContext(), explore_configuration);
	}

	/**
	 * Set value of Explore_Configuration
	 * @param context
	 * @param explore_configuration
	 */
	public final void setExplore_Configuration(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.Configuration explore_configuration)
	{
		if (explore_configuration == null)
			getMendixObject().setValue(context, MemberNames.Explore_Configuration.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Explore_Configuration.toString(), explore_configuration.getMendixObject().getId());
	}

	/**
	 * @return value of Explore_ExplorerFile
	 */
	public final sftp.proxies.ExplorerFile getExplore_ExplorerFile() throws com.mendix.core.CoreException
	{
		return getExplore_ExplorerFile(getContext());
	}

	/**
	 * @param context
	 * @return value of Explore_ExplorerFile
	 */
	public final sftp.proxies.ExplorerFile getExplore_ExplorerFile(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.ExplorerFile result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Explore_ExplorerFile.toString());
		if (identifier != null)
			result = sftp.proxies.ExplorerFile.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Explore_ExplorerFile
	 * @param explore_explorerfile
	 */
	public final void setExplore_ExplorerFile(sftp.proxies.ExplorerFile explore_explorerfile)
	{
		setExplore_ExplorerFile(getContext(), explore_explorerfile);
	}

	/**
	 * Set value of Explore_ExplorerFile
	 * @param context
	 * @param explore_explorerfile
	 */
	public final void setExplore_ExplorerFile(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.ExplorerFile explore_explorerfile)
	{
		if (explore_explorerfile == null)
			getMendixObject().setValue(context, MemberNames.Explore_ExplorerFile.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Explore_ExplorerFile.toString(), explore_explorerfile.getMendixObject().getId());
	}

	/**
	 * @return value of MkDirRequest_Explore
	 */
	public final sftp.proxies.MkDirRequest getMkDirRequest_Explore() throws com.mendix.core.CoreException
	{
		return getMkDirRequest_Explore(getContext());
	}

	/**
	 * @param context
	 * @return value of MkDirRequest_Explore
	 */
	public final sftp.proxies.MkDirRequest getMkDirRequest_Explore(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.MkDirRequest result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.MkDirRequest_Explore.toString());
		if (identifier != null)
			result = sftp.proxies.MkDirRequest.load(context, identifier);
		return result;
	}

	/**
	 * Set value of MkDirRequest_Explore
	 * @param mkdirrequest_explore
	 */
	public final void setMkDirRequest_Explore(sftp.proxies.MkDirRequest mkdirrequest_explore)
	{
		setMkDirRequest_Explore(getContext(), mkdirrequest_explore);
	}

	/**
	 * Set value of MkDirRequest_Explore
	 * @param context
	 * @param mkdirrequest_explore
	 */
	public final void setMkDirRequest_Explore(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.MkDirRequest mkdirrequest_explore)
	{
		if (mkdirrequest_explore == null)
			getMendixObject().setValue(context, MemberNames.MkDirRequest_Explore.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.MkDirRequest_Explore.toString(), mkdirrequest_explore.getMendixObject().getId());
	}

	/**
	 * @return value of RenameRequest_Explore
	 */
	public final sftp.proxies.RenameRequest getRenameRequest_Explore() throws com.mendix.core.CoreException
	{
		return getRenameRequest_Explore(getContext());
	}

	/**
	 * @param context
	 * @return value of RenameRequest_Explore
	 */
	public final sftp.proxies.RenameRequest getRenameRequest_Explore(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.RenameRequest result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RenameRequest_Explore.toString());
		if (identifier != null)
			result = sftp.proxies.RenameRequest.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RenameRequest_Explore
	 * @param renamerequest_explore
	 */
	public final void setRenameRequest_Explore(sftp.proxies.RenameRequest renamerequest_explore)
	{
		setRenameRequest_Explore(getContext(), renamerequest_explore);
	}

	/**
	 * Set value of RenameRequest_Explore
	 * @param context
	 * @param renamerequest_explore
	 */
	public final void setRenameRequest_Explore(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.RenameRequest renamerequest_explore)
	{
		if (renamerequest_explore == null)
			getMendixObject().setValue(context, MemberNames.RenameRequest_Explore.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RenameRequest_Explore.toString(), renamerequest_explore.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return exploreMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final sftp.proxies.Explore that = (sftp.proxies.Explore) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "SFTP.Explore";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
