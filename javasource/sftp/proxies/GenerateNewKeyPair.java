// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package sftp.proxies;

public class GenerateNewKeyPair
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject generateNewKeyPairMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "SFTP.GenerateNewKeyPair";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		KeyType("KeyType"),
		GenerateNewKeyPair_Key("SFTP.GenerateNewKeyPair_Key");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public GenerateNewKeyPair(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "SFTP.GenerateNewKeyPair"));
	}

	protected GenerateNewKeyPair(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject generateNewKeyPairMendixObject)
	{
		if (generateNewKeyPairMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("SFTP.GenerateNewKeyPair", generateNewKeyPairMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a SFTP.GenerateNewKeyPair");

		this.generateNewKeyPairMendixObject = generateNewKeyPairMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'GenerateNewKeyPair.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static sftp.proxies.GenerateNewKeyPair initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return sftp.proxies.GenerateNewKeyPair.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static sftp.proxies.GenerateNewKeyPair initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new sftp.proxies.GenerateNewKeyPair(context, mendixObject);
	}

	public static sftp.proxies.GenerateNewKeyPair load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return sftp.proxies.GenerateNewKeyPair.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of KeyType
	 * @param keytype
	 */
	public final sftp.proxies.NewKeyType getKeyType()
	{
		return getKeyType(getContext());
	}

	/**
	 * @param context
	 * @return value of KeyType
	 */
	public final sftp.proxies.NewKeyType getKeyType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.KeyType.toString());
		if (obj == null)
			return null;

		return sftp.proxies.NewKeyType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of KeyType
	 * @param keytype
	 */
	public final void setKeyType(sftp.proxies.NewKeyType keytype)
	{
		setKeyType(getContext(), keytype);
	}

	/**
	 * Set value of KeyType
	 * @param context
	 * @param keytype
	 */
	public final void setKeyType(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.NewKeyType keytype)
	{
		if (keytype != null)
			getMendixObject().setValue(context, MemberNames.KeyType.toString(), keytype.toString());
		else
			getMendixObject().setValue(context, MemberNames.KeyType.toString(), null);
	}

	/**
	 * @return value of GenerateNewKeyPair_Key
	 */
	public final sftp.proxies.Key getGenerateNewKeyPair_Key() throws com.mendix.core.CoreException
	{
		return getGenerateNewKeyPair_Key(getContext());
	}

	/**
	 * @param context
	 * @return value of GenerateNewKeyPair_Key
	 */
	public final sftp.proxies.Key getGenerateNewKeyPair_Key(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.Key result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.GenerateNewKeyPair_Key.toString());
		if (identifier != null)
			result = sftp.proxies.Key.load(context, identifier);
		return result;
	}

	/**
	 * Set value of GenerateNewKeyPair_Key
	 * @param generatenewkeypair_key
	 */
	public final void setGenerateNewKeyPair_Key(sftp.proxies.Key generatenewkeypair_key)
	{
		setGenerateNewKeyPair_Key(getContext(), generatenewkeypair_key);
	}

	/**
	 * Set value of GenerateNewKeyPair_Key
	 * @param context
	 * @param generatenewkeypair_key
	 */
	public final void setGenerateNewKeyPair_Key(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.Key generatenewkeypair_key)
	{
		if (generatenewkeypair_key == null)
			getMendixObject().setValue(context, MemberNames.GenerateNewKeyPair_Key.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.GenerateNewKeyPair_Key.toString(), generatenewkeypair_key.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return generateNewKeyPairMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final sftp.proxies.GenerateNewKeyPair that = (sftp.proxies.GenerateNewKeyPair) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "SFTP.GenerateNewKeyPair";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
