// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package sftp.proxies;

public class HostKey
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject hostKeyMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "SFTP.HostKey";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Fingerprint("Fingerprint"),
		Algorithm("Algorithm"),
		Format("Format"),
		Key("Key"),
		HostKey_Configuration("SFTP.HostKey_Configuration");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public HostKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "SFTP.HostKey"));
	}

	protected HostKey(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject hostKeyMendixObject)
	{
		if (hostKeyMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("SFTP.HostKey", hostKeyMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a SFTP.HostKey");

		this.hostKeyMendixObject = hostKeyMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'HostKey.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static sftp.proxies.HostKey initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return sftp.proxies.HostKey.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static sftp.proxies.HostKey initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new sftp.proxies.HostKey(context, mendixObject);
	}

	public static sftp.proxies.HostKey load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return sftp.proxies.HostKey.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Fingerprint
	 */
	public final java.lang.String getFingerprint()
	{
		return getFingerprint(getContext());
	}

	/**
	 * @param context
	 * @return value of Fingerprint
	 */
	public final java.lang.String getFingerprint(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Fingerprint.toString());
	}

	/**
	 * Set value of Fingerprint
	 * @param fingerprint
	 */
	public final void setFingerprint(java.lang.String fingerprint)
	{
		setFingerprint(getContext(), fingerprint);
	}

	/**
	 * Set value of Fingerprint
	 * @param context
	 * @param fingerprint
	 */
	public final void setFingerprint(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String fingerprint)
	{
		getMendixObject().setValue(context, MemberNames.Fingerprint.toString(), fingerprint);
	}

	/**
	 * @return value of Algorithm
	 */
	public final java.lang.String getAlgorithm()
	{
		return getAlgorithm(getContext());
	}

	/**
	 * @param context
	 * @return value of Algorithm
	 */
	public final java.lang.String getAlgorithm(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Algorithm.toString());
	}

	/**
	 * Set value of Algorithm
	 * @param algorithm
	 */
	public final void setAlgorithm(java.lang.String algorithm)
	{
		setAlgorithm(getContext(), algorithm);
	}

	/**
	 * Set value of Algorithm
	 * @param context
	 * @param algorithm
	 */
	public final void setAlgorithm(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String algorithm)
	{
		getMendixObject().setValue(context, MemberNames.Algorithm.toString(), algorithm);
	}

	/**
	 * @return value of Format
	 */
	public final java.lang.String getFormat()
	{
		return getFormat(getContext());
	}

	/**
	 * @param context
	 * @return value of Format
	 */
	public final java.lang.String getFormat(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Format.toString());
	}

	/**
	 * Set value of Format
	 * @param format
	 */
	public final void setFormat(java.lang.String format)
	{
		setFormat(getContext(), format);
	}

	/**
	 * Set value of Format
	 * @param context
	 * @param format
	 */
	public final void setFormat(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String format)
	{
		getMendixObject().setValue(context, MemberNames.Format.toString(), format);
	}

	/**
	 * @return value of Key
	 */
	public final java.lang.String getKey()
	{
		return getKey(getContext());
	}

	/**
	 * @param context
	 * @return value of Key
	 */
	public final java.lang.String getKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Key.toString());
	}

	/**
	 * Set value of Key
	 * @param key
	 */
	public final void setKey(java.lang.String key)
	{
		setKey(getContext(), key);
	}

	/**
	 * Set value of Key
	 * @param context
	 * @param key
	 */
	public final void setKey(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String key)
	{
		getMendixObject().setValue(context, MemberNames.Key.toString(), key);
	}

	/**
	 * @return value of HostKey_Configuration
	 */
	public final sftp.proxies.Configuration getHostKey_Configuration() throws com.mendix.core.CoreException
	{
		return getHostKey_Configuration(getContext());
	}

	/**
	 * @param context
	 * @return value of HostKey_Configuration
	 */
	public final sftp.proxies.Configuration getHostKey_Configuration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.Configuration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.HostKey_Configuration.toString());
		if (identifier != null)
			result = sftp.proxies.Configuration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of HostKey_Configuration
	 * @param hostkey_configuration
	 */
	public final void setHostKey_Configuration(sftp.proxies.Configuration hostkey_configuration)
	{
		setHostKey_Configuration(getContext(), hostkey_configuration);
	}

	/**
	 * Set value of HostKey_Configuration
	 * @param context
	 * @param hostkey_configuration
	 */
	public final void setHostKey_Configuration(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.Configuration hostkey_configuration)
	{
		if (hostkey_configuration == null)
			getMendixObject().setValue(context, MemberNames.HostKey_Configuration.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.HostKey_Configuration.toString(), hostkey_configuration.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return hostKeyMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final sftp.proxies.HostKey that = (sftp.proxies.HostKey) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "SFTP.HostKey";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
