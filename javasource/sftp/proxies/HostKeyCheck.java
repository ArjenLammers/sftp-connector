// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package sftp.proxies;

public class HostKeyCheck
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject hostKeyCheckMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "SFTP.HostKeyCheck";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		HostKeyFingerprint("HostKeyFingerprint"),
		HostKey("HostKey"),
		HostKeyCheck_Configuration("SFTP.HostKeyCheck_Configuration");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public HostKeyCheck(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "SFTP.HostKeyCheck"));
	}

	protected HostKeyCheck(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject hostKeyCheckMendixObject)
	{
		if (hostKeyCheckMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("SFTP.HostKeyCheck", hostKeyCheckMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a SFTP.HostKeyCheck");

		this.hostKeyCheckMendixObject = hostKeyCheckMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'HostKeyCheck.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static sftp.proxies.HostKeyCheck initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return sftp.proxies.HostKeyCheck.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static sftp.proxies.HostKeyCheck initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new sftp.proxies.HostKeyCheck(context, mendixObject);
	}

	public static sftp.proxies.HostKeyCheck load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return sftp.proxies.HostKeyCheck.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of HostKeyFingerprint
	 */
	public final java.lang.String getHostKeyFingerprint()
	{
		return getHostKeyFingerprint(getContext());
	}

	/**
	 * @param context
	 * @return value of HostKeyFingerprint
	 */
	public final java.lang.String getHostKeyFingerprint(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.HostKeyFingerprint.toString());
	}

	/**
	 * Set value of HostKeyFingerprint
	 * @param hostkeyfingerprint
	 */
	public final void setHostKeyFingerprint(java.lang.String hostkeyfingerprint)
	{
		setHostKeyFingerprint(getContext(), hostkeyfingerprint);
	}

	/**
	 * Set value of HostKeyFingerprint
	 * @param context
	 * @param hostkeyfingerprint
	 */
	public final void setHostKeyFingerprint(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String hostkeyfingerprint)
	{
		getMendixObject().setValue(context, MemberNames.HostKeyFingerprint.toString(), hostkeyfingerprint);
	}

	/**
	 * @return value of HostKey
	 */
	public final java.lang.String getHostKey()
	{
		return getHostKey(getContext());
	}

	/**
	 * @param context
	 * @return value of HostKey
	 */
	public final java.lang.String getHostKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.HostKey.toString());
	}

	/**
	 * Set value of HostKey
	 * @param hostkey
	 */
	public final void setHostKey(java.lang.String hostkey)
	{
		setHostKey(getContext(), hostkey);
	}

	/**
	 * Set value of HostKey
	 * @param context
	 * @param hostkey
	 */
	public final void setHostKey(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String hostkey)
	{
		getMendixObject().setValue(context, MemberNames.HostKey.toString(), hostkey);
	}

	/**
	 * @return value of HostKeyCheck_Configuration
	 */
	public final sftp.proxies.Configuration getHostKeyCheck_Configuration() throws com.mendix.core.CoreException
	{
		return getHostKeyCheck_Configuration(getContext());
	}

	/**
	 * @param context
	 * @return value of HostKeyCheck_Configuration
	 */
	public final sftp.proxies.Configuration getHostKeyCheck_Configuration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		sftp.proxies.Configuration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.HostKeyCheck_Configuration.toString());
		if (identifier != null)
			result = sftp.proxies.Configuration.load(context, identifier);
		return result;
	}

	/**
	 * Set value of HostKeyCheck_Configuration
	 * @param hostkeycheck_configuration
	 */
	public final void setHostKeyCheck_Configuration(sftp.proxies.Configuration hostkeycheck_configuration)
	{
		setHostKeyCheck_Configuration(getContext(), hostkeycheck_configuration);
	}

	/**
	 * Set value of HostKeyCheck_Configuration
	 * @param context
	 * @param hostkeycheck_configuration
	 */
	public final void setHostKeyCheck_Configuration(com.mendix.systemwideinterfaces.core.IContext context, sftp.proxies.Configuration hostkeycheck_configuration)
	{
		if (hostkeycheck_configuration == null)
			getMendixObject().setValue(context, MemberNames.HostKeyCheck_Configuration.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.HostKeyCheck_Configuration.toString(), hostkeycheck_configuration.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return hostKeyCheckMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final sftp.proxies.HostKeyCheck that = (sftp.proxies.HostKeyCheck) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "SFTP.HostKeyCheck";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
