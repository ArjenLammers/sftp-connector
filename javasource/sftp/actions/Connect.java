// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sftp.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import net.schmizz.sshj.SSHClient;
import net.schmizz.sshj.sftp.StatefulSFTPClient;
import sftp.impl.SFTP;

/**
 * Sets up a session to an SFTP server and executes a microflow.
 * Within the microflow actions on the SFTP can be performed.
 * If the microflow is finished, the connection to the SFTP will be disconnected.
 */
public class Connect extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __configuration;
	private sftp.proxies.Configuration configuration;
	private java.lang.String microflow;
	private IMendixObject microflowArgument;
	private java.lang.String microflowResult;

	public Connect(IContext context, IMendixObject configuration, java.lang.String microflow, IMendixObject microflowArgument, java.lang.String microflowResult)
	{
		super(context);
		this.__configuration = configuration;
		this.microflow = microflow;
		this.microflowArgument = microflowArgument;
		this.microflowResult = microflowResult;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.configuration = __configuration == null ? null : sftp.proxies.Configuration.initialize(getContext(), __configuration);

		// BEGIN USER CODE
		IMendixObject result = null;
		SSHClient ssh = SFTP.connect(getContext(), configuration);
		try {
			StatefulSFTPClient client = new StatefulSFTPClient(ssh.newSFTPClient().getSFTPEngine());
			SFTP.setClient(getContext(), client);
			result = Core.execute(getContext(), this.microflow, this.microflowArgument);
		} finally {
			SFTP.removeContextObjects(getContext());
			ssh.disconnect();
			ssh.close();
		}
		
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Connect";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
