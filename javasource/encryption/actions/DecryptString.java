// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package encryption.actions;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class DecryptString extends CustomJavaAction<java.lang.String>
{
	private java.lang.String value;
	private java.lang.String key;
	private java.lang.String prefix;

	public DecryptString(IContext context, java.lang.String value, java.lang.String key, java.lang.String prefix)
	{
		super(context);
		this.value = value;
		this.key = key;
		this.prefix = prefix;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (this.value == null || !this.value.startsWith(this.prefix))
			return null;
		if (this.prefix == null || this.prefix.isEmpty())
			throw new MendixRuntimeException("Prefix should not be empty");
		if (this.key == null || this.key.isEmpty())
			throw new MendixRuntimeException("Key should not be empty");
		if (this.key.length() != 16)
			throw new MendixRuntimeException("Key length should be 16");
		Cipher c = Cipher.getInstance("AES/GCM/PKCS5PADDING");
		SecretKeySpec k = new SecretKeySpec(this.key.getBytes(), "AES");
		String[] s = this.value.substring(this.prefix.length()).split(";");
		if (s.length < 2) //Not an encrypted string, just return the original value.
			return this.value;

		byte[] iv = Base64.decodeBase64(s[0].getBytes());
		byte[] encryptedData = Base64.decodeBase64(s[1].getBytes());
		GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, iv);
		c.init(Cipher.DECRYPT_MODE, k, spec);
		return new String(c.doFinal(encryptedData));
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "DecryptString";
	}

	// BEGIN EXTRA CODE
	private final int GCM_TAG_LENGTH = 16; // in bytes
	// END EXTRA CODE
}
